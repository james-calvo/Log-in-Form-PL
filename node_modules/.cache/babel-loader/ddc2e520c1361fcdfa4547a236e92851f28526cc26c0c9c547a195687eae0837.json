{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jessiejames\\\\Downloads\\\\ReactJS-MaterialUI-Login_Form-Drawer\\\\src\\\\postman.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Postman = () => {\n  _s();\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const changeHandlerPassword = e => {\n    const newPassword = e.target.value;\n    setPassword(newPassword);\n\n    // Password format validation\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]{6,}$/;\n    if (!passwordRegex.test(newPassword)) {\n      setPasswordError('Password must have at least one uppercase letter, one lowercase letter, one number, one special character, and a minimum length of 6 characters');\n    } else {\n      setPasswordError('');\n    }\n  };\n  const submitHandler = e => {\n    e.preventDefault();\n    console.log(password);\n    // Add form submission logic here\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: changeHandlerPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), passwordError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: passwordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Postman, \"bWtbxxC4GB1NVRXVv6LTra7RMUY=\");\n_c = Postman;\nexport default Postman;\nvar _c;\n$RefreshReg$(_c, \"Postman\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Postman","_s","password","setPassword","passwordError","setPasswordError","changeHandlerPassword","e","newPassword","target","value","passwordRegex","test","submitHandler","preventDefault","console","log","onSubmit","children","type","name","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/jessiejames/Downloads/ReactJS-MaterialUI-Login_Form-Drawer/src/postman.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Postman = () => {\r\n  const [password, setPassword] = useState('');\r\n  const [passwordError, setPasswordError] = useState('');\r\n\r\n  const changeHandlerPassword = (e) => {\r\n    const newPassword = e.target.value;\r\n    setPassword(newPassword);\r\n\r\n    // Password format validation\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]{6,}$/;\r\n    if (!passwordRegex.test(newPassword)) {\r\n      setPasswordError('Password must have at least one uppercase letter, one lowercase letter, one number, one special character, and a minimum length of 6 characters');\r\n    } else {\r\n      setPasswordError('');\r\n    }\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(password);\r\n    // Add form submission logic here\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <input type='password' name='password' value={password} onChange={changeHandlerPassword} />\r\n      {passwordError && <p style={{ color: 'red' }}>{passwordError}</p>}\r\n      <button type='submit'>login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Postman;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMS,qBAAqB,GAAIC,CAAC,IAAK;IACnC,MAAMC,WAAW,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAClCP,WAAW,CAACK,WAAW,CAAC;;IAExB;IACA,MAAMG,aAAa,GAAG,gFAAgF;IACtG,IAAI,CAACA,aAAa,CAACC,IAAI,CAACJ,WAAW,CAAC,EAAE;MACpCH,gBAAgB,CAAC,iJAAiJ,CAAC;IACrK,CAAC,MAAM;MACLA,gBAAgB,CAAC,EAAE,CAAC;IACtB;EACF,CAAC;EAED,MAAMQ,aAAa,GAAIN,CAAC,IAAK;IAC3BA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClBC,OAAO,CAACC,GAAG,CAACd,QAAQ,CAAC;IACrB;EACF,CAAC;EAED,oBACEH,OAAA;IAAMkB,QAAQ,EAAEJ,aAAc;IAAAK,QAAA,gBAC5BnB,OAAA;MAAOoB,IAAI,EAAC,UAAU;MAACC,IAAI,EAAC,UAAU;MAACV,KAAK,EAAER,QAAS;MAACmB,QAAQ,EAAEf;IAAsB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC1FrB,aAAa,iBAAIL,OAAA;MAAG2B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAT,QAAA,EAAEd;IAAa;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjE1B,OAAA;MAAQoB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEX,CAAC;AAACxB,EAAA,CA9BID,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AAgCb,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}